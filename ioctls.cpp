// Autogenerated by ioctlgen.py

#include "nvwrapper.h"

const char *ioctl2str(LinuxNvhostChannelIoctl value) {
	switch(value) {
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_ZCULL_BIND:
		return "NVGPU_IOCTL_CHANNEL_ZCULL_BIND";
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_CYCLE_STATS:
		return "NVGPU_IOCTL_CHANNEL_CYCLE_STATS";
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_CYCLE_STATS_SNAPSHOT:
		return "NVGPU_IOCTL_CHANNEL_CYCLE_STATS_SNAPSHOT";
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_ALLOC_OBJ_CTX:
		return "NVGPU_IOCTL_CHANNEL_ALLOC_OBJ_CTX";
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_SET_TIMEOUT_EX:
		return "NVGPU_IOCTL_CHANNEL_SET_TIMEOUT_EX";
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_GET_TIMEDOUT:
		return "NVGPU_IOCTL_CHANNEL_GET_TIMEDOUT";
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_FORCE_RESET:
		return "NVGPU_IOCTL_CHANNEL_FORCE_RESET";
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_ALLOC_GPFIFO:
		return "NVGPU_IOCTL_CHANNEL_ALLOC_GPFIFO";
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_SUBMIT_GPFIFO:
		return "NVGPU_IOCTL_CHANNEL_SUBMIT_GPFIFO";
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_SET_TIMEOUT:
		return "NVGPU_IOCTL_CHANNEL_SET_TIMEOUT";
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_SET_NVMAP_FD:
		return "NVGPU_IOCTL_CHANNEL_SET_NVMAP_FD";
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_ENABLE:
		return "NVGPU_IOCTL_CHANNEL_ENABLE";
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_FREE_OBJ_CTX:
		return "NVGPU_IOCTL_CHANNEL_FREE_OBJ_CTX";
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_EVENTS_CTRL:
		return "NVGPU_IOCTL_CHANNEL_EVENTS_CTRL";
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_WAIT:
		return "NVGPU_IOCTL_CHANNEL_WAIT";
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_OPEN:
		return "NVGPU_IOCTL_CHANNEL_OPEN";
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_DISABLE:
		return "NVGPU_IOCTL_CHANNEL_DISABLE";
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_PREEMPT:
		return "NVGPU_IOCTL_CHANNEL_PREEMPT";
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_SET_ERROR_NOTIFIER:
		return "NVGPU_IOCTL_CHANNEL_SET_ERROR_NOTIFIER";
	case LinuxNvhostChannelIoctl::NVGPU_IOCTL_CHANNEL_SET_PRIORITY:
		return "NVGPU_IOCTL_CHANNEL_SET_PRIORITY";
	default:
		return "UNKNOWN";
	}
}

const char *ioctl2str(LinuxNvhostCtrlGpuIoctl value) {
	switch(value) {
	case LinuxNvhostCtrlGpuIoctl::NVGPU_GPU_IOCTL_GET_TPC_EXCEPTION_EN_STATUS:
		return "NVGPU_GPU_IOCTL_GET_TPC_EXCEPTION_EN_STATUS";
	case LinuxNvhostCtrlGpuIoctl::NVGPU_GPU_IOCTL_VSMS_MAPPING:
		return "NVGPU_GPU_IOCTL_VSMS_MAPPING";
	case LinuxNvhostCtrlGpuIoctl::NVGPU_GPU_IOCTL_INVAL_ICACHE:
		return "NVGPU_GPU_IOCTL_INVAL_ICACHE";
	case LinuxNvhostCtrlGpuIoctl::NVGPU_GPU_IOCTL_GET_TPC_MASKS:
		return "NVGPU_GPU_IOCTL_GET_TPC_MASKS";
	case LinuxNvhostCtrlGpuIoctl::NVGPU_GPU_IOCTL_ZBC_SET_TABLE:
		return "NVGPU_GPU_IOCTL_ZBC_SET_TABLE";
	case LinuxNvhostCtrlGpuIoctl::NVGPU_GPU_IOCTL_ZBC_QUERY_TABLE:
		return "NVGPU_GPU_IOCTL_ZBC_QUERY_TABLE";
	case LinuxNvhostCtrlGpuIoctl::NVGPU_GPU_IOCTL_MARK_COMPRESSIBLE_WRITE:
		return "NVGPU_GPU_IOCTL_MARK_COMPRESSIBLE_WRITE";
	case LinuxNvhostCtrlGpuIoctl::NVGPU_GPU_IOCTL_OPEN_TSG:
		return "NVGPU_GPU_IOCTL_OPEN_TSG";
	case LinuxNvhostCtrlGpuIoctl::NVGPU_GPU_IOCTL_OPEN_CHANNEL:
		return "NVGPU_GPU_IOCTL_OPEN_CHANNEL";
	case LinuxNvhostCtrlGpuIoctl::NVGPU_GPU_IOCTL_SET_SM_DEBUG_MODE:
		return "NVGPU_GPU_IOCTL_SET_SM_DEBUG_MODE";
	case LinuxNvhostCtrlGpuIoctl::NVGPU_GPU_IOCTL_FLUSH_L2:
		return "NVGPU_GPU_IOCTL_FLUSH_L2";
	case LinuxNvhostCtrlGpuIoctl::NVGPU_GPU_IOCTL_ZCULL_GET_INFO:
		return "NVGPU_GPU_IOCTL_ZCULL_GET_INFO";
	case LinuxNvhostCtrlGpuIoctl::NVGPU_GPU_IOCTL_GET_CHARACTERISTICS:
		return "NVGPU_GPU_IOCTL_GET_CHARACTERISTICS";
	case LinuxNvhostCtrlGpuIoctl::NVGPU_GPU_IOCTL_ALLOC_AS:
		return "NVGPU_GPU_IOCTL_ALLOC_AS";
	case LinuxNvhostCtrlGpuIoctl::NVGPU_GPU_IOCTL_SET_MMUDEBUG_MODE:
		return "NVGPU_GPU_IOCTL_SET_MMUDEBUG_MODE";
	case LinuxNvhostCtrlGpuIoctl::NVGPU_GPU_IOCTL_ZCULL_GET_CTX_SIZE:
		return "NVGPU_GPU_IOCTL_ZCULL_GET_CTX_SIZE";
	case LinuxNvhostCtrlGpuIoctl::NVGPU_GPU_IOCTL_NUM_VSMS:
		return "NVGPU_GPU_IOCTL_NUM_VSMS";
	case LinuxNvhostCtrlGpuIoctl::NVGPU_GPU_IOCTL_PREPARE_COMPRESSIBLE_READ:
		return "NVGPU_GPU_IOCTL_PREPARE_COMPRESSIBLE_READ";
	case LinuxNvhostCtrlGpuIoctl::NVGPU_GPU_IOCTL_WAIT_FOR_PAUSE:
		return "NVGPU_GPU_IOCTL_WAIT_FOR_PAUSE";
	default:
		return "UNKNOWN";
	}
}
